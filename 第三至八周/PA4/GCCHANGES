Decisions
---------
Stack contains
- return addresses
- heap pointers
- the odd piece of junk

Odd pieces of junk most be odd to distinguish them from heap pointers
(used in String.concat)

Changes
-------

Added: cgen_gc.h: garbage collection options

cgen.cc:
- garbage collection header (selects which GC runs)
- garbage collection debugging:
  - frequent garbage collections (-t)
  - check that values are legal (-T)
- track assignments for generational GC
- add -1 header before objects

cgtest.cc:
Add -g (use generational GC), -t (test: do very frequent GCs),
-T (test: check that all values are legal) options.

cgen.h:
Add code_select_gc method to CgenClassTable class.

trap.handler:
- Merged changes between revisions 1.12 and 1.13 of trap handler into
  trap handler for GC from miyamoto.
- Fixed bug in generational GC: didn't handle assignments properly
  (registers were trashed)
- Changed method of identifying pointers on stack:
  no tags pushed, simply checks that values are even and are in the
  correct address range. Aborts if eyecatcher missing.
- Added _gc_check primitive to check the presence of an eyecatcher
  on an object.
- Removed the Stop & Copy GC.

Other comments on GC:
- The evenness test on the stack contents is only used by String.concat,
  to save a size on the stack. If that can be removed, the 
  _GenGC_ChkCopy and _GenGC_OfsCopy functions can be simplified by
  removing the evenness test.


Move -t to runtime library:
trap.handler 2.1
>> Add a _MemMgr_Test function that calls the garbage collector if the
>> global _MemMgr_TEST is non-zero (this global is generated by coolc
>> when the -t option is used).
>> _MemMgr_Test is called on every memory allocation, i.e. in Object.copy,
>> String.concat, String.substr, IO.in_string, IO.in_int 

cgen.cc 1.15
>> Change -t option: it now just sets the value of the _MemMgr_TEST
>> global to true instead of calling the colletor at random intervals.
>> The trap.handler tests this global to see if it should call the 
>> garbage collector.

cgen.cc 1.17
The temporaries allocated on the stack should be cleared at function
entry. Otherwise they may be random values such as illegal pointers.
