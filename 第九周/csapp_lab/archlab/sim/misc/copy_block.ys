#   Execution begins at address 0
        .pos 0                      #告诉汇编器应该从地址0开始生产代码
        irmovq stack, %rsp          #初始化栈指针
        call main                   #调用main
        halt                        #终止程序
#   Sample linked list
        .align 8
    ele1:
        .quad 0x00a                 #quad = quard word
        .quad ele2
    ele2:
        .quad 0x0b0
        .quad ele3
    ele3:
        .quad 0xc00
        .quad 0
main:
    irmoveq src,%rdi               #传参数
    irmoveq dest,%rsi              #传参数
    irmoveq $3,%rdx                #传参数 
    call copyblock
    ret

copyblock:
        xorq    %rax,%rax           # 设置 sum 初值为 0，long val = 0
loop:
        addq    %rdx,%rdx           # linked
        jle     end                 # 判断len是否>0
        mrmoveq (%rdi),%rcx         # long val = *src
        irmoveq $8,%rbx             # 保存8
        addq    %rbx,%rdi           # src++
        rmmoveq %rcx,(%rsi)         # *dest = val
        addq    %rbx,%rsi           # dest++
        xorq    %rcx,%rax           # result ^= val
        irmoveq $1,%rbx             
        subq    %rbx,%rdx           # len--
        jmp     loop                
end:
        ret                         # 返回


#   stack starts here and grows to lower address
.pos 0x200 #此处说明了栈会从这个地址开始，向低地址增长
stack: